@using ConstanciaNoInhabilitado.Shared.Entities.Catalogos
@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@inject HttpClient Http
@inject ISnackbar Snackbar


<MudDataGrid T="Dependencia" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" Style="width:65vw;">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.IdDependencia" Title="Id" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Descripción">
            <CellTemplate>
                @if (!context.Item.Acciones)
                {
                    @context.Item.Descripcion
                }
                else
                {
                    <MudTextField @bind-Value="@context.Item.Descripcion" Variant="Variant.Outlined"></MudTextField>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn>
            <CellTemplate>
                @if (!context.Item.Acciones)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => EditarCausa(context.Item)">Editar</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Update" OnClick="(p=>UdateDependencia(_elements))">Actualizar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close" OnClick="() => CancelarCausa(context.Item)">Cancelar</MudButton>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Dependencia" />
    </PagerContent>
</MudDataGrid>


@if (_elements.idBandera == 1)
{
    <p onclick="((@Snackbar.Add("El registro se actualizo correctamente en la base de datos", Severity.Success))"></p>

}
else if (_elements.idBandera == 0)
{
    <p onclick="((@Snackbar.Add("Uppp´s ocurrio un problema, el registro no se actualizo en la base de datos", Severity.Error))"></p>
}



@code {

    private List<Dependencia> Elements { set; get; }
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private Dependencia _elements { set; get; } = new();


    protected override async Task OnInitializedAsync()
    {
        await CargarServidoresPublicos();
    }
    private async Task CargarServidoresPublicos()
    {

        var responde_Servidores_publicos = await Http!.PostAsync($"/api/Catalogos/CargasDependencias", null);
        if (responde_Servidores_publicos.IsSuccessStatusCode)
        {
            List<Dependencia> process = await responde_Servidores_publicos.Content.ReadFromJsonAsync<List<Dependencia>>();

            if (process.Count > 0)
            {
                Elements = process;
            }
        }
        StateHasChanged();
    }

    private async Task EditarCausa(Dependencia causasInhabilitacion)
    {
        _elements = causasInhabilitacion;       
        causasInhabilitacion.Acciones = true;
    }
    private async Task CancelarCausa(Dependencia causasInhabilitacion)
    {
        causasInhabilitacion.Acciones = false;
    }

    // custom sort by name length
    private Func<Dependencia, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Descripcion.Length;
        else
            return x.Descripcion;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Dependencia, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Descripcion.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };   

    // events
    void RowClicked(DataGridRowClickEventArgs<Dependencia> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<Dependencia> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Dependencia> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task UdateDependencia(Dependencia causasInhabilitacion)
    {
        var logueoResponse = await Http.PostAsJsonAsync<Dependencia>("/api/Catalogos/ActualizarDependencia", causasInhabilitacion);
        var sesionUser = await logueoResponse.Content.ReadFromJsonAsync<Dependencia>();
        _elements.idBandera = 3;
        _elements.idBandera = sesionUser.idBandera;
        if (_elements.idBandera == 2)
        {
            causasInhabilitacion.Acciones = true;
        }
        else if (_elements.idBandera == 1)
        {
            causasInhabilitacion.Acciones = false;
        }
    }

}
