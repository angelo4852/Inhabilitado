@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDataGrid T="OrigenesInhabilitacion" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" Style="width:65vw;">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.IdOrigenInhabilitacion" Title="Nr" Sortable="false" Filterable="false" />
        <TemplateColumn Title="Descripción">
            <CellTemplate>
                @if (!context.Item.Acciones)
                {
                    @context.Item.Descripcion
                }
                else
                {
                    <MudTextField @bind-Value="@context.Item.Descripcion" Variant="Variant.Outlined"></MudTextField>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn>
            <CellTemplate>
                @if (!context.Item.Acciones)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" OnClick="() => EditarCausa(context.Item)">Editar</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Update" OnClick="(p => UpdateOrigen(_elements))">Actualizar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close" OnClick="() => CancelarCausa(context.Item)">Cancelar</MudButton>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="OrigenesInhabilitacion" />
    </PagerContent>
</MudDataGrid>

@if (_elements.idBandera == 1)
{
    <p onclick="((@Snackbar.Add("El registro se actualizo correctamente en la base de datos", Severity.Success))"></p>

}
else if (_elements.idBandera == 0)
{
    <p onclick="((@Snackbar.Add("Uppp´s ocurrio un problema, el registro no se actualizo en la base de datos", Severity.Error))"></p>
}
@code {
    private List<OrigenesInhabilitacion> Elements = new List<OrigenesInhabilitacion>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private OrigenesInhabilitacion _elements { set; get; } = new();

    protected override async Task OnInitializedAsync()
    {
        var llenaLista = await Http.PostAsJsonAsync<List<OrigenesInhabilitacion>>("api/Catalogos/CargasOrigen", null);
        var respuesta = await llenaLista.Content.ReadFromJsonAsync<List<OrigenesInhabilitacion>>();

        if (respuesta.Count > 0)
        {
            Elements = respuesta;

        }
        else
        {           


        }

    }

    private async Task EditarCausa(OrigenesInhabilitacion causasInhabilitacion)
    {
        _elements = causasInhabilitacion;

        causasInhabilitacion.Acciones = true;
    }
    private async Task CancelarCausa(OrigenesInhabilitacion causasInhabilitacion)
    {
        causasInhabilitacion.Acciones = false;
    }

    // custom sort by name length
    private Func<OrigenesInhabilitacion, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Descripcion.Length;
        else
            return x.Descripcion;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<OrigenesInhabilitacion, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Descripcion.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    // events
    void RowClicked(DataGridRowClickEventArgs<OrigenesInhabilitacion> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<OrigenesInhabilitacion> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<OrigenesInhabilitacion> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    public async Task UpdateOrigen(OrigenesInhabilitacion origenesInhabilitacion)
    {
        var respuesta = await Http.PostAsJsonAsync<OrigenesInhabilitacion>("api/Catalogos/ActualizarOrigen", origenesInhabilitacion);
        var sesionUser = await respuesta.Content.ReadFromJsonAsync<OrigenesInhabilitacion>();
        string data = JsonSerializer.Serialize(sesionUser, new JsonSerializerOptions { WriteIndented = true });
               var content = new StringContent(data, Encoding.UTF8, "application/json");
               Console.WriteLine($"Json:{data}");



        // sesionUser.idBandera = sesionUser.idBandera;

        // Console.WriteLine(sesionUser);

        _elements.idBandera = 3;

        _elements.idBandera = sesionUser.idBandera;
        if (sesionUser.idBandera == 2)
        {
            origenesInhabilitacion.Acciones = true;
        }
        else if (sesionUser.idBandera == 1)
        {
            origenesInhabilitacion.Acciones = false;
        }
    }
}
