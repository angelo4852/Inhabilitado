@page "/ConstanciaNoInhabilitado/Admin/AgregaUsuario";
@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@using ConstanciaNoInhabilitado.Client.Shared.Forms;
@using ConstanciaNoInhabilitado.Client.Componentes.Menu;
@using ConstanciaNoInhabilitado.Client.Shared.Partial.Dialogs;

@using MudBlazor
@using ConstanciaNoInhabilitado.Client.Auth;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using ConstanciaNoInhabilitado.Client.Shared.Partial.Cards;
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorage
@inject HttpClient httpClient;
@inject IDialogService DialogService
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navigationManager;
@inject ISnackbar Snackbar
@inject IDialogService _dialogService;
@inject IDialogService DialogService;
@attribute [Authorize]

<MainFormHome>

	<Main>
		<CardForm>
			<Content>
				<MudText Align="Align.Center"  Typo="Typo.h6">Agregar Usuario</MudText>

				<MudGrid Justify="Justify.Center">
					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.Nombre" Label="Nombre" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>
					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.ApellidoPaterno" Label="Apellido Paterno" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>
					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.ApellidoMaterno" Label="Apellido Materno" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>

					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.CorreoElectronico" Label="Correo Electronico" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>
					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.Usuario" Label="Usuario" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>
					<MudItem xs="7">
						<MudTextField @bind-Value="_usuario.Contrasena" Label="Contraseña" Variant="Variant.Outlined" Required="true"></MudTextField>
					</MudItem>

					<MudItem xs="7">
						<MudSelect T="string" Label="Rol" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="_usuario.Descripcion" Required="true">
							@foreach (var item in ListSexo)
							{
								<MudSelectItem Value="@(item.IdRolUsuario.ToString())">
									@item.Descripcion
								</MudSelectItem>
							}
						</MudSelect>
					</MudItem>
					<MudItem xs="7">
						@if (DefineInhabilitado)
						{
							<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="AgregaUsuario">Establecer Inhabilitado</MudButton>
						}
						else
						{

							<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="AgregaUsuario">Guardar Registro</MudButton>
						}
					</MudItem>
				</MudGrid>

			</Content>
		</CardForm>


	</Main>
</MainFormHome>



@code {
	[Parameter]
	public bool DefineInhabilitado { set; get; } = false;
	[Parameter]
	public Usuarios? _usuario { set; get; } = new Usuarios();
	private List<RolUsuario> ListSexo = new List<RolUsuario>();
	private List<Usuarios> ListUsuario = new List<Usuarios>();
	private List<string> ErroresEncontrados { set; get; } = new();

	protected override async Task OnInitializedAsync()
	{
		await ListaRol();
		await ListaUsuario();
	}

	public async Task AgregaUsuario()
	{
		List<string> listaErrores = new();
		ErroresEncontrados.Clear();

		_usuario.FechaCreacion = DateTime.Now;
		_usuario.FechaModificacion = DateTime.Now;
		_usuario.IdUsuarioModifica = 5;

		listaErrores = await ValidaInformacion(_usuario);
		if (listaErrores.Count > 0)
		{
			ErroresEncontrados = listaErrores;
			await MostrarModales(TipoModal.Errores);

		}
		else

		{
			var response = await httpClient.PostAsJsonAsync<Usuarios>("api/AgregaUsuario/AgregaUsuarios", _usuario);
			var respuestaUsuario = await response.Content.ReadFromJsonAsync<Usuarios>();
			if (response.IsSuccessStatusCode)
			{

				Snackbar.Clear();
				Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
				Snackbar.Configuration.ShowCloseIcon = false;
				Snackbar.Add("Usuario agregado correctamente", Severity.Success, config =>
				{
					config.Icon = Icons.Material.Filled.SdCardAlert;
					config.IconColor = Color.Primary;
					config.IconSize = Size.Large;
					Limpiar();
				});

			}
			else
			{
				Snackbar.Clear();
				Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
				Snackbar.Configuration.ShowCloseIcon = false;
				Snackbar.Add("Ocurrio un error intenta mas tarde", Severity.Error, config =>
				{
					config.Icon = Icons.Material.Filled.SdCardAlert;
					config.IconColor = Color.Primary;
					config.IconSize = Size.Large;
					Limpiar();
				});


			}
			Console.WriteLine(response);


		}


	}
	public async Task<List<RolUsuario>> ListaRol()
	{
		var response = await httpClient.PostAsJsonAsync<List<RolUsuario>>("/api/Catalogos/ListaRol", null);

		if (response.IsSuccessStatusCode)
		{
			var list = await response.Content.ReadFromJsonAsync<List<RolUsuario>>();
			if (list.Count > 0)
			{
				_usuario.IdRolUsuario = 0;
				ListSexo = list;
				StateHasChanged();
			}
		}


		return ListSexo;

	}

	public async Task<List<Usuarios>> ListaUsuario()
	{
		var response = await httpClient.PostAsJsonAsync<List<Usuarios>>("/api/Catalogos/ListaUsuario", null);

		if (response.IsSuccessStatusCode)
		{
			var list = await response.Content.ReadFromJsonAsync<List<Usuarios>>();
			if (list.Count > 0)
			{
				ListUsuario = list;
				StateHasChanged();
			}
		}

		return ListUsuario;

	}
	public async Task Limpiar()
	{
		_usuario.Usuario = "";
		_usuario.ApellidoMaterno = "";
		_usuario.ApellidoPaterno = "";
		_usuario.Contrasena = "";
		_usuario.CorreoElectronico = "";
		_usuario.IdRolUsuario = 0;
		_usuario.Nombre = "";
	}

	public async Task<List<string>> ValidaInformacion(Usuarios _usuario)
	{
		List<string> strings = new List<string>();
		_usuario.IdRolUsuario = Convert.ToInt32(_usuario.Descripcion);
		if (_usuario.Nombre == string.Empty || _usuario.Nombre == null)
		{
			strings.Add("El campo  no puede estar vacio");

		}
		if (_usuario.ApellidoPaterno == string.Empty || _usuario.ApellidoPaterno == null)
		{
			strings.Add("El campo Apellido Paterno no puede estar vacio");

		}
		if (_usuario.ApellidoMaterno == string.Empty || _usuario.ApellidoMaterno == null)
		{
			strings.Add("El campo Apellido Materno no puede estar vacio");

		}
		if (_usuario.Usuario == string.Empty || _usuario.Usuario == null)
		{
			strings.Add("El campo Usuario no puede estar vacio");

		}		

		if (_usuario.Contrasena == string.Empty || _usuario.Contrasena == null)
		{
			strings.Add("El campo Contraseña no puede estar vacio");

		}
		Console.WriteLine(_usuario.IdRolUsuario);
		if (_usuario.IdRolUsuario == 0 || _usuario.IdRolUsuario == null)
		{
			Console.WriteLine(_usuario.IdRolUsuario);
			Console.WriteLine("Descripcion" + _usuario.Descripcion);

			strings.Add("El campo Rol no puede estar vacio");

		}
		
		return strings;

	}
	public enum TipoModal
	{
		Errores = 1,
	}
	private async Task MostrarModales(TipoModal tipoModal)
	{
		if (tipoModal == TipoModal.Errores)
		{
			var options = new DialogOptions
				{
					CloseOnEscapeKey = true,
					FullWidth = true,
					MaxWidth = MaxWidth.Small,
					CloseButton = true
				};
			var parameters = new DialogParameters<ModalErrores>();
			parameters.Add(p => p.listaErrores, ErroresEncontrados);
			DialogService.Show<ModalErrores>("Simple Dialog", parameters, options);
		}
	}
}
