@page "/ConstanciaNoInhabilitado/Admin/EditarInhabilitado"

@using ConstanciaNoInhabilitado.Client.Shared.Forms;
@using ConstanciaNoInhabilitado.Client.Componentes.Menu;
@using MudBlazor
@using ConstanciaNoInhabilitado.Client.Auth;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using ConstanciaNoInhabilitado.Client.Shared.Partial.Cards;
@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject NavigationManager navigationManager;
@attribute [Authorize]


<MainFormHome>
    <ContentBreadcrumbs>
        <MudLink Href="ConstanciaNoInhabilitado/Default">
            <b>Inicio</b>
        </MudLink>
        <b>/</b>
        <MudLink Href="ConstanciaNoInhabilitado/Admin/Default">
            <b>Administración</b>
        </MudLink>
        <b>/</b>
        <b style="color:#A8113E;">
            Editar Inhabilitados
        </b>
    </ContentBreadcrumbs>
    <Main>
        <CardForm>
            <Content>
                <MudGrid Justify="Justify.Center">
                     <MudItem xs="11">
                        <MudText Typo="Typo.h5">Modifique la información de un servidor público</MudText>
                     </MudItem>
                     <MudItem xs="4">
                        <MudSelect T="string" Label="Selecciona el criterio de búsqueda" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="@BuscarServidorPublico.TipoCriterioBúsqueda">
                            @foreach (var item in ListCriterio)
                            {
                                <MudSelectItem Value=@(@item.Text)/>
                            }
                        </MudSelect>
                     </MudItem> 
                     <MudItem xs="5">
                        <MudTextField @bind-Value="BuscarServidorPublico.Criterio" Label="Introduce el criterio" Variant="Variant.Outlined"></MudTextField>
                     </MudItem>
                    <MudItem xs="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ValidarInformacion">Buscar</MudButton>
                    </MudItem>
                    @if (ErorresEncontrados.Count() > 0)
                    {
                        <MudItem xs="6">
                            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                                ¡Error!<br />
                                @foreach (var item in ErorresEncontrados)
                                {
                                    @item <br />
                                }
                            </MudAlert>
                        </MudItem>
                    }                   
                </MudGrid>               
            </Content>
        </CardForm>

       
    </Main>
</MainFormHome>

@code
{
    public string TextValue { get; set; }
    public string selectValueCategoria { get; set; }

    private BuscarServidorPublico BuscarServidorPublico { get; set; } = new();

    private List<CriterioDeBusqueda> ListCriterio = new List<CriterioDeBusqueda>
    {
        new CriterioDeBusqueda { Value = "1", Text = "R.F.C." },
        new CriterioDeBusqueda { Value = "2", Text = "Nombre" },
        new CriterioDeBusqueda { Value = "3", Text = "Apellido Paterno" },
        new CriterioDeBusqueda { Value = "4", Text = "Apellido Materno" }
    };

    private List<string> ErorresEncontrados { get; set; } = new();

    private async Task ValidarInformacion()
    {
        ErorresEncontrados.Clear();
        if (BuscarServidorPublico.TipoCriterioBúsqueda == string.Empty) ErorresEncontrados.Add("Selecciona un criterio de búsqueda");
        if (BuscarServidorPublico.Criterio == string.Empty) ErorresEncontrados.Add("Introduce el criterio de búsqueda");
        if (BuscarServidorPublico.TipoCriterioBúsqueda == "R.F.C.") 
        { 
            if (BuscarServidorPublico.Criterio.Length != 13) ErorresEncontrados.Add("El RFC introducido no es valido");
        }
        if (ErorresEncontrados.Count() == 0) await BuscarServidor();
    }

    private async Task BuscarServidor()
    {     
        
    }
}