@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@using static MudBlazor.CategoryTypes
@inject HttpClient httpClient;

<MudGrid Justify="Justify.Center">
    <MudItem xs="7">
        <MudSelect T="string" Label="Selecciona el tipo de persona" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="servidorPublico.TypePersonProovedor">
            @foreach (var item in TypePerson)
            {
                <MudSelectItem Value="@(item.Text)" />
            }
        </MudSelect>
    </MudItem>
    @if (servidorPublico.TypePersonProovedor != string.Empty)
    {
        <MudItem xs="7">
            <MudTextField @bind-Value="servidorPublico.Nombre" Label="Nombre" Variant="Variant.Outlined"></MudTextField>
        </MudItem>
        @if (servidorPublico.TypePersonProovedor == "Fisica")
        {
            <MudItem xs="7">
                <MudTextField @bind-Value="servidorPublico.ApellidoPaterno" Label="Apellido Paterno" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="7">
                <MudTextField @bind-Value="servidorPublico.ApellidoMaterno" Label="Apellido Materno" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
            <MudItem xs="7">
                <MudTextField @bind-Value="servidorPublico.CURP" Label="CURP" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
        }

        @if (!DefineInhabilitado)
        {
            <MudItem xs="7">
                <MudTextField @bind-Value="servidorPublico.RFC" Label="R.F.C" Variant="Variant.Outlined"></MudTextField>
            </MudItem>
        }

        <MudItem xs="7">
            <MudSelect T="int?" Label="Sexo" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="servidorPublico.idGenero" Required="true">
                @foreach (var item in ListSexo)
                {
                    <MudSelectItem Value="@(item.idGenero)">
                        @item.genero_valor
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="7">
            @if (DefineInhabilitado)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Establecer Inhabilitado</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="callEvent">Guardar Registro</MudButton>

@*                 <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Guardar Registro</MudButton>
 *@            }
        </MudItem>
    }
    
</MudGrid>




@code {
    [Parameter] public bool DefineInhabilitado { set; get; } = false;

    [Parameter]
    public EventCallback<ServidorPublico> eventCallback { set; get; }
    [Parameter]
    public ServidorPublico? servidorPublico { set; get; } = new ServidorPublico();
    private List<Sexo> ListSexo { get; set; } = new();

    private List<TypePerson> TypePerson = new List<TypePerson>
    {
        new TypePerson { Value = "1", Text = "Fisica" },
        new TypePerson { Value = "2", Text = "Moral" },
    };

    private async Task callEvent()
    {

        var resp = await httpClient.PostAsJsonAsync<List<Sexo>>("api/AdmisRegistraInhabilitado/Sexo",null);
        var respuesta = await resp.Content.ReadFromJsonAsync<List<Sexo>>();

        // ListSexo = respuesta;

        respuesta.AddRange(ListSexo);
        Console.WriteLine(servidorPublico);
        await eventCallback.InvokeAsync(servidorPublico);
    }
}
