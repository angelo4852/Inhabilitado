@using ConstanciaNoInhabilitado.Shared.Entities.Login;
@using System.Text.Json
@using System.Text
@inject ISnackbar Snackbar
@inject HttpClient httpClient;


<MudGrid Justify="Justify.Center">
    

    <MudItem xs="7">
        <MudTextField @bind-Value="servidorPublico.Nombre" Label="Nombre" Variant="Variant.Outlined" Required="true"></MudTextField>
    </MudItem>
    <MudItem xs="7">
        <MudTextField @bind-Value="servidorPublico.ApellidoPaterno" Label="Apellido Paterno" Variant="Variant.Outlined" Required="true"></MudTextField>
    </MudItem>
    <MudItem xs="7">
        <MudTextField @bind-Value="servidorPublico.ApellidoMaterno" Label="Apellido Materno" Variant="Variant.Outlined" Required="true"></MudTextField>
    </MudItem>
    @if (!DefineInhabilitado)
    {
        <MudItem xs="7">
            <MudTextField @bind-Value="servidorPublico.RFC" Label="R.F.C" Variant="Variant.Outlined" Required="true"></MudTextField>
        </MudItem>
    }
    <MudItem xs="7">
        <MudTextField @bind-Value="servidorPublico.CURP" Label="CURP" Variant="Variant.Outlined" Required="true"></MudTextField>
    </MudItem>
    <MudItem xs="7">

            <MudSelect T="int?" Label="@servidorPublico.genero_valor" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
            @if (ListSexo is not null)
            {
                @foreach (var item in ListSexo)
                {
                    <MudSelectItem Value="@(item.idGenero)">
                        @item.genero_valor
                    </MudSelectItem>
                }
            }
          
        </MudSelect>      
        
    </MudItem>
    <MudItem xs="7">
        @if (DefineInhabilitado)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary">Establecer Inhabilitado</MudButton>
        }
        else
        {

            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="(p => callEvent(servidorPublico))">Guardar Registro</MudButton>
        }
    </MudItem>
</MudGrid>

<p>@servidorPublico.idBandera</p>


@if (servidorPublico.idBandera == 1)
{
    <p onclick="((@Snackbar.Add("El registro se actualizo correctamente en la base de datos", Severity.Success))"></p>

 

}
else if (servidorPublico.idBandera == 2)
{
    <p onclick="((@Snackbar.Add("El RFC ya esta relacionado con otro Inhabilitado", Severity.Error))"></p>

}

<p>@servidorPublico.IdInhabilitado</p>
<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    [Parameter] 
    public bool DefineInhabilitado { set; get; } = false;
    [Parameter]
    public ServidorPublico? servidorPublico { set; get; } = new ServidorPublico();
    [Parameter]
    public EventCallback<ServidorPublico> eventCallback { set; get; }

    public int? cero = 0;
    string country = "Austria";
    public bool MostrarFormulario { set; get; }
    public List<Sexo>? ListSexo { set; get; } = new();
    public bool suSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await ListaSexo();
    }

    private async Task<List<Sexo>> ListaSexo()
    {
        List<Sexo> listaSexo = new();
        try
        {
            ListSexo = new();
            var logueoResponse = await httpClient.PostAsJsonAsync<List<Sexo>>("/api/AdminRegistraInhabilitado/SelectGenero", null);
            var listSexoResponde = await logueoResponse.Content.ReadFromJsonAsync<List<Sexo>>();
            ListSexo.AddRange(listSexoResponde!);
            Console.WriteLine(ListSexo.Count);

            foreach (var item in ListSexo)
            {
                Console.WriteLine($"{item.genero_valor} - {item.idGenero}");            
            }

        } 
        catch(Exception ex)
        {
            Console.WriteLine(ex);        
        }

        return ListSexo;
    }

    private async Task callEvent(ServidorPublico _servidorPublico)
    {

        servidorPublico.idBandera = 0;
        var logueoResponse = await httpClient.PostAsJsonAsync<ServidorPublico>("/api/AdminRegistraInhabilitado/ActualizarInhabilitado", _servidorPublico);
        var sesionUser = await logueoResponse.Content.ReadFromJsonAsync<ServidorPublico>();
        servidorPublico = sesionUser;

        if (logueoResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("Entro a logueo" + " " + logueoResponse.IsSuccessStatusCode);
        }
        else
        {
            suSuccess = false;
        }
        string data = JsonSerializer.Serialize(servidorPublico, new JsonSerializerOptions { WriteIndented = true });
        var content = new StringContent(data, Encoding.UTF8, "application/json");
        Console.WriteLine($"Json:{data}");
        // Console.WriteLine("entro a call evente" + servidorPublico);


        // await eventCallback.InvokeAsync(servidorPublico);
    }
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Success);
    }

}